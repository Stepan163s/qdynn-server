#!/bin/bash
set -e

# üöÄ QDYNN-SERVER –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞
# –†–∞–∑–≤–æ—Ä–∞—á–∏–≤–∞–µ—Ç DNSTT —Ç—É–Ω–Ω–µ–ª—å-—Å–µ—Ä–≤–µ—Ä –æ–¥–Ω–æ–π –∫–æ–º–∞–Ω–¥–æ–π

VERSION="1.0.0"
REPO_URL="https://github.com/Stepan163s/qdynn-server"
INSTALL_DIR="/opt/qdynn-server"
BIN_DIR="/usr/local/bin"
CONFIG_DIR="/etc/qdynn"
LOG_DIR="/var/log/qdynn"
SERVICE_NAME="qdynn-server"

# –¶–≤–µ—Ç–∞ –¥–ª—è –∫—Ä–∞—Å–∏–≤–æ–≥–æ –≤—ã–≤–æ–¥–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
WHITE='\033[1;37m'
NC='\033[0m' # No Color

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ—Ç–ª–∞–¥–∫–∏
# –í–∫–ª—é—á–∏—Ç—å: curl -fsSL .../install.sh | sudo bash -s -- --debug
# –ò–ª–∏ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å QDYNN_DEBUG=1
IS_DEBUG=0
# –í –æ–±—ã—á–Ω–æ–º —Ä–µ–∂–∏–º–µ –ø–æ–¥–∞–≤–ª—è–µ–º —à—É–º–Ω—ã–π –≤—ã–≤–æ–¥ –∫–æ–º–∞–Ω–¥
QUIET="> /dev/null 2>&1"

# –¢—Ä–µ–±—É–µ–º–∞—è –≤–µ—Ä—Å–∏—è Go –∏ –≤–µ—Ä—Å–∏—è –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏
GO_MIN_VERSION="1.21.0"
GO_INSTALL_VERSION="1.22.5"

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∫—Ä–∞—Å–∏–≤–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
log_info() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

log_success() {
    echo -e "${GREEN}[‚úì]${NC} $1"
}

log_warning() {
    echo -e "${YELLOW}[‚ö†]${NC} $1"
}

log_error() {
    echo -e "${RED}[‚úó]${NC} $1"
    exit 1
}

log_header() {
    echo -e "\n${PURPLE}‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì${NC}"
    echo -e "${WHITE}  üöÄ QDYNN-SERVER v$VERSION - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞${NC}"
    echo -e "${CYAN}     –Ø–¥—Ä–æ: DNSTT Server –æ—Ç David Fifield (bamsoftware.com)${NC}"
    echo -e "${PURPLE}‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì${NC}\n"
}

# –†–∞–∑–±–æ—Ä —Ñ–ª–∞–≥–æ–≤ CLI –∏ –≤–∫–ª—é—á–µ–Ω–∏–µ —Ä–µ–∂–∏–º–∞ –æ—Ç–ª–∞–¥–∫–∏ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
parse_args() {
    while [[ $# -gt 0 ]]; do
        case "$1" in
            --debug|-d)
                IS_DEBUG=1
                ;;
        esac
        shift
    done

    if [[ -n "${QDYNN_DEBUG:-}" ]] || { [[ -n "${DEBUG:-}" ]] && [[ "${DEBUG}" != "0" ]]; }; then
        IS_DEBUG=1
    fi

    if [[ "$IS_DEBUG" -eq 1 ]]; then
        QUIET=""
        set -o pipefail
        set -x
        echo -e "${YELLOW}[‚ö†]${NC} DEBUG —Ä–µ–∂–∏–º –≤–∫–ª—é—á–µ–Ω: –≤—ã–≤–æ–¥ –∫–æ–º–∞–Ω–¥ –∏ –æ—à–∏–±–æ–∫ –Ω–µ –ø–æ–¥–∞–≤–ª—è–µ—Ç—Å—è"
        trap 'echo -e "${RED}[‚úó]${NC} –û—à–∏–±–∫–∞ –Ω–∞ —Å—Ç—Ä–æ–∫–µ $LINENO: –∫–æ–º–∞–Ω–¥–∞: ${BASH_COMMAND}"' ERR
    fi
}

# –ó–∞–≥—Ä—É–∑–∫–∞ –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã—Ö —Å–∫—Ä–∏–ø—Ç–æ–≤ –≤ $INSTALL_DIR/scripts
fetch_scripts() {
    log_info "–ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ª—É–∂–µ–±–Ω—ã–µ —Å–∫—Ä–∏–ø—Ç—ã..."
    mkdir -p "$INSTALL_DIR/scripts"

    local base_url="https://raw.githubusercontent.com/Stepan163s/qdynn-server/main/scripts"
    curl -fsSL "$base_url/cli-functions.sh" -o "$INSTALL_DIR/scripts/cli-functions.sh" $QUIET || \
        log_error "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å cli-functions.sh"
    curl -fsSL "$base_url/create-scripts.sh" -o "$INSTALL_DIR/scripts/create-scripts.sh" $QUIET || \
        log_error "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å create-scripts.sh"

    chmod +x "$INSTALL_DIR/scripts/create-scripts.sh"
    chown -R qdynn:qdynn "$INSTALL_DIR/scripts"
    log_success "–°–ª—É–∂–µ–±–Ω—ã–µ —Å–∫—Ä–∏–ø—Ç—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã"
}

# –†–µ–∑–µ—Ä–≤–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–∫—Ä–∏–ø—Ç–æ–≤ (–µ—Å–ª–∏ create-scripts.sh –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω)
generate_runtime_scripts() {
    log_warning "create-scripts.sh –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–∫—Ä–∏–ø—Ç—ã –ª–æ–∫–∞–ª—å–Ω–æ..."
    mkdir -p "$INSTALL_DIR/scripts"

    cat > $INSTALL_DIR/scripts/start-server.sh << 'EOF'
#!/bin/bash
# QDYNN-SERVER Start Script

INSTALL_DIR="/opt/qdynn-server"
CONFIG_DIR="/etc/qdynn"
LOG_DIR="/var/log/qdynn"
PID_FILE="/var/run/qdynn-server.pid"

# –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
source $CONFIG_DIR/server.conf

log() {
    echo "$(date '+%Y-%m-%d %H:%M:%S') [INFO] $1" >> $LOG_DIR/server.log
}

log "–ó–∞–ø—É—Å–∫–∞–µ–º QDYNN DNSTT Server..."
log "–î–æ–º–µ–Ω: $SERVER_DOMAIN, IP: $EXTERNAL_IP"

mkdir -p $LOG_DIR/clients

cd $INSTALL_DIR
exec $INSTALL_DIR/bin/dnstt-server \
    -domain "ns.$SERVER_DOMAIN" \
    -privkey-file <(echo -n "$PRIVATE_KEY" | xxd -r -p) \
    -mtu 1280 \
    -max-clients $MAX_CLIENTS \
    >> $LOG_DIR/dnstt.log 2>&1 &

echo $! > $PID_FILE
log "DNSTT Server –∑–∞–ø—É—â–µ–Ω —Å PID: $(cat $PID_FILE)"

while kill -0 $(cat $PID_FILE) 2>/dev/null; do
    sleep 60
    if [[ $(stat -c%s "$LOG_DIR/dnstt.log" 2>/dev/null || echo 0) -gt 104857600 ]]; then
        mv $LOG_DIR/dnstt.log $LOG_DIR/dnstt.log.old
        log "–†–æ—Ç–∞—Ü–∏—è –ª–æ–≥–æ–≤ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞"
    fi
done

log "DNSTT Server –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–≤–µ—Ä—à–µ–Ω"
EOF

    cat > $INSTALL_DIR/scripts/stop-server.sh << 'EOF'
#!/bin/bash
# QDYNN-SERVER Stop Script

LOG_DIR="/var/log/qdynn"
PID_FILE="/var/run/qdynn-server.pid"

log() {
    echo "$(date '+%Y-%m-%d %H:%M:%S') [INFO] $1" >> $LOG_DIR/server.log
}

if [[ -f $PID_FILE ]]; then
    PID=$(cat $PID_FILE)
    if kill -0 $PID 2>/dev/null; then
        log "–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º DNSTT Server (PID: $PID)..."
        kill -TERM $PID
        for i in {1..30}; do
            if ! kill -0 $PID 2>/dev/null; then
                log "DNSTT Server –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
                rm -f $PID_FILE
                exit 0
            fi
            sleep 1
        done
        log "–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ DNSTT Server..."
        kill -KILL $PID 2>/dev/null
        rm -f $PID_FILE
    else
        log "PID —Ñ–∞–π–ª –Ω–∞–π–¥–µ–Ω, –Ω–æ –ø—Ä–æ—Ü–µ—Å—Å –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω"
        rm -f $PID_FILE
    fi
else
    log "PID —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω"
fi
EOF

    cat > $INSTALL_DIR/scripts/monitor.sh << 'EOF'
#!/bin/bash
# QDYNN-SERVER Monitor Script

INSTALL_DIR="/opt/qdynn-server"
CONFIG_DIR="/etc/qdynn"
LOG_DIR="/var/log/qdynn"

source $CONFIG_DIR/server.conf

log() {
    echo "$(date '+%Y-%m-%d %H:%M:%S') [MONITOR] $1" >> $LOG_DIR/monitor.log
}

check_dnstt() {
    if pgrep -f "dnstt-server" > /dev/null; then
        return 0
    else
        return 1
    fi
}

check_dns() {
    nslookup "test.ns.$SERVER_DOMAIN" 127.0.0.1 > /dev/null 2>&1
    return $?
}

log_client_stats() {
    CLIENT_COUNT=$(ss -tuln | grep ":53 " | wc -l)
    echo "$(date '+%Y-%m-%d %H:%M:%S') –ê–∫—Ç–∏–≤–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤: $CLIENT_COUNT" >> $LOG_DIR/clients.log
}

log "–ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ QDYNN Server"
while true; do
    if check_dnstt; then
        log_client_stats
    else
        log "–ö–†–ò–¢–ò–ß–ù–û: DNSTT —Å–µ—Ä–≤–µ—Ä –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç!"
    fi
    sleep 300
done
EOF

    cat > $INSTALL_DIR/scripts/update.sh << 'EOF'
#!/bin/bash
# QDYNN-SERVER Update Script (delegates to remote script)
curl -fsSL https://raw.githubusercontent.com/Stepan163s/qdynn-server/main/update.sh | bash
EOF

    chmod +x $INSTALL_DIR/scripts/*.sh
    chown -R qdynn:qdynn "$INSTALL_DIR/scripts"
    log_success "–°–∫—Ä–∏–ø—Ç—ã —Å–æ–∑–¥–∞–Ω—ã –ª–æ–∫–∞–ª—å–Ω–æ"
}
# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∞ Go (–µ—Å–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –≤–µ—Ä—Å–∏—è –Ω–∏–∂–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π)
ensure_go() {
    local has_go=0
    local current_ver=""
    if command -v go >/dev/null 2>&1; then
        has_go=1
        current_ver=$(go version | awk '{print $3}' | sed 's/^go//')
    fi

    if [[ "$has_go" -eq 1 ]]; then
        if dpkg --compare-versions "$current_ver" ge "$GO_MIN_VERSION"; then
            log_success "Go –Ω–∞–π–¥–µ–Ω: –≤–µ—Ä—Å–∏—è $current_ver (–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ)"
            return 0
        else
            log_warning "–û–±–Ω–∞—Ä—É–∂–µ–Ω Go $current_ver (< $GO_MIN_VERSION). –í—ã–ø–æ–ª–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ..."
        fi
    else
        log_info "Go –Ω–µ –Ω–∞–π–¥–µ–Ω. –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Go $GO_INSTALL_VERSION..."
    fi

    install_go
}

install_go() {
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É
    local arch
    case "$(uname -m)" in
        x86_64|amd64)
            arch="amd64" ;;
        aarch64|arm64)
            arch="arm64" ;;
        *)
            log_error "–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞: $(uname -m). –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è amd64 –∏ arm64."
            ;;
    esac

    local tar_name="go${GO_INSTALL_VERSION}.linux-${arch}.tar.gz"
    local url="https://go.dev/dl/${tar_name}"
    log_info "–°–∫–∞—á–∏–≤–∞–µ–º Go ${GO_INSTALL_VERSION} (${arch})..."
    curl -fsSL "$url" -o "/tmp/${tar_name}" || log_error "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å ${url}"

    log_info "–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Go –≤ /usr/local ..."
    rm -rf /usr/local/go
    tar -C /usr/local -xzf "/tmp/${tar_name}" $QUIET
    ln -sf /usr/local/go/bin/go /usr/local/bin/go
    ln -sf /usr/local/go/bin/gofmt /usr/local/bin/gofmt

    # –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º PATH –¥–ª—è –±—É–¥—É—â–∏—Ö —Å–µ—Å—Å–∏–π
    cat > /etc/profile.d/go.sh << 'EOF'
export PATH="$PATH:/usr/local/go/bin"
EOF

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    if command -v go >/dev/null 2>&1; then
        local new_ver
        new_ver=$(go version | awk '{print $3}' | sed 's/^go//')
        log_success "Go —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: –≤–µ—Ä—Å–∏—è ${new_ver}"
    else
        log_error "Go –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ—Å–ª–µ —É—Å—Ç–∞–Ω–æ–≤–∫–∏"
    fi
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ root
check_root() {
    if [[ $EUID -ne 0 ]]; then
        log_error "–≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –¥–æ–ª–∂–µ–Ω –∑–∞–ø—É—Å–∫–∞—Ç—å—Å—è —Å –ø—Ä–∞–≤–∞–º–∏ root (sudo)"
    fi
    log_success "–ü—Ä–∞–≤–∞ root –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω—ã"
}

# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã
detect_os() {
    if [[ -f /etc/os-release ]]; then
        . /etc/os-release
        OS=$NAME
        VER=$VERSION_ID
    else
        log_error "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω—É—é —Å–∏—Å—Ç–µ–º—É"
    fi
    
    log_info "–û–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞: $OS $VER"
    
    if [[ "$OS" != "Ubuntu" ]] && [[ "$OS" != "Debian GNU/Linux" ]]; then
        log_warning "–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ Ubuntu –∏ Debian. –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –Ω–∞ —Å–≤–æ–π —Å—Ç—Ä–∞—Ö –∏ —Ä–∏—Å–∫..."
    fi
}

# –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
install_dependencies() {
    log_info "–û–±–Ω–æ–≤–ª—è–µ–º —Å–∏—Å—Ç–µ–º—É –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏..."
    
    apt-get update -q $QUIET
    apt-get install -y \
        curl \
        wget \
        git \
        build-essential \
        systemd \
        certbot \
        python3-certbot-nginx \
        nginx \
        jq \
        qrencode \
        unzip \
        $QUIET
        
    log_success "–ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã"
}

# –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
setup_directories() {
    log_info "–°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏..."
    
    # –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è qdynn
    if ! id "qdynn" &>/dev/null; then
        useradd -r -s /bin/false -d /opt/qdynn-server -c "QDYNN Server" qdynn
        log_success "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å qdynn —Å–æ–∑–¥–∞–Ω"
    fi
    
    # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    mkdir -p $INSTALL_DIR $CONFIG_DIR $LOG_DIR
    mkdir -p $INSTALL_DIR/{bin,configs,logs,scripts,certs}
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
    chown -R qdynn:qdynn $INSTALL_DIR $CONFIG_DIR $LOG_DIR
    chmod 750 $INSTALL_DIR $CONFIG_DIR
    chmod 755 $LOG_DIR
    
    log_success "–î–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Å–æ–∑–¥–∞–Ω—ã –∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã"
}

# –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –∏ –∫–æ–º–ø–∏–ª—è—Ü–∏—è DNSTT
install_dnstt() {
    log_info "–°–∫–∞—á–∏–≤–∞–µ–º –∏ –∫–æ–º–ø–∏–ª–∏—Ä—É–µ–º DNSTT..."
    
    cd /tmp
    # –ï—Å–ª–∏ –∫–∞—Ç–∞–ª–æ–≥ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç (–ø–æ–≤—Ç–æ—Ä–Ω–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞) ‚Äî —É–¥–∞–ª—è–µ–º
    if [[ -d "dnstt" ]]; then
        log_warning "–û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è dnstt. –£–¥–∞–ª—è–µ–º..."
        rm -rf dnstt
    fi
    git clone https://www.bamsoftware.com/git/dnstt.git $QUIET
    cd dnstt
    
    # –ö–æ–º–ø–∏–ª–∏—Ä—É–µ–º —Å–µ—Ä–≤–µ—Ä (–≤—ã–≤–æ–¥–∏–º –±–∏–Ω–∞—Ä–Ω–∏–∫ —Å –¥—Ä—É–≥–∏–º –∏–º–µ–Ω–µ–º, —á—Ç–æ–±—ã –Ω–µ –ø—É—Ç–∞—Ç—å —Å –∫–∞—Ç–∞–ª–æ–≥–æ–º)
    local go_build_flags=""
    if [[ "$IS_DEBUG" -eq 1 ]]; then
        go_build_flags="-v"
    fi
    GO111MODULE=on go build ${go_build_flags} -o dnstt-server.bin ./dnstt-server $QUIET
    if [[ ! -f dnstt-server.bin ]]; then
        log_error "–°–±–æ—Ä–∫–∞ DNSTT –Ω–µ —É–¥–∞–ª–∞—Å—å: –±–∏–Ω–∞—Ä–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ó–∞–ø—É—Å—Ç–∏—Ç–µ —É—Å—Ç–∞–Ω–æ–≤–∫—É —Å --debug –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–µ–π."
    fi
    
    # –ö–æ–ø–∏—Ä—É–µ–º –≤ —É—Å—Ç–∞–Ω–æ–≤–æ—á–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
    cp dnstt-server.bin $INSTALL_DIR/bin/dnstt-server
    chmod +x $INSTALL_DIR/bin/dnstt-server
    
    # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
    cd /
    rm -rf /tmp/dnstt
    
    log_success "DNSTT —Å–µ—Ä–≤–µ—Ä —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
}

# –°–æ–∑–¥–∞–Ω–∏–µ CLI –∫–æ–º–∞–Ω–¥—ã
create_cli() {
    log_info "–°–æ–∑–¥–∞–µ–º CLI –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å..."
    
    cat > $BIN_DIR/qdynn << 'EOF'
#!/bin/bash
# QDYNN-SERVER CLI Interface

VERSION="1.0.0"
INSTALL_DIR="/opt/qdynn-server"
CONFIG_DIR="/etc/qdynn" 
LOG_DIR="/var/log/qdynn"
SERVICE_NAME="qdynn-server"

# –¶–≤–µ—Ç–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
WHITE='\033[1;37m'
NC='\033[0m'

source $INSTALL_DIR/scripts/cli-functions.sh

case "$1" in
    start)     start_server ;;
    stop)      stop_server ;;
    restart)   restart_server ;;
    status)    show_status ;;
    logs)      show_logs "${2:-50}" ;;
    config)    configure_server "$2" "$3" ;;
    clients)   manage_clients "$2" "$3" ;;
    update)    update_server ;;
    *)         show_help ;;
esac
EOF
    
    chmod +x $BIN_DIR/qdynn
    log_success "CLI –∫–æ–º–∞–Ω–¥–∞ —Å–æ–∑–¥–∞–Ω–∞: qdynn"
}

# –°–æ–∑–¥–∞–Ω–∏–µ systemd —Å–µ—Ä–≤–∏—Å–∞
create_service() {
    log_info "–°–æ–∑–¥–∞–µ–º systemd —Å–µ—Ä–≤–∏—Å..."
    
    cat > /etc/systemd/system/$SERVICE_NAME.service << EOF
[Unit]
Description=QDYNN DNSTT Tunnel Server
After=network.target
Wants=network.target

[Service]
Type=simple
User=qdynn
Group=qdynn
WorkingDirectory=$INSTALL_DIR
ExecStart=$INSTALL_DIR/scripts/start-server.sh
ExecStop=$INSTALL_DIR/scripts/stop-server.sh
Restart=always
RestartSec=10
StandardOutput=journal
StandardError=journal

# –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å
NoNewPrivileges=yes
ProtectSystem=strict
ProtectHome=yes
ReadWritePaths=$CONFIG_DIR $LOG_DIR $INSTALL_DIR

[Install]
WantedBy=multi-user.target
EOF
    
    systemctl daemon-reload
    systemctl enable $SERVICE_NAME $QUIET
    
    log_success "Systemd —Å–µ—Ä–≤–∏—Å —Å–æ–∑–¥–∞–Ω –∏ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω"
}

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–∞—á–∞–ª—å–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
generate_config() {
    log_info "–ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–∞—á–∞–ª—å–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é..."
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–ª—é—á–∏
    PRIVATE_KEY=$(openssl rand -hex 32)
    PUBLIC_KEY=$(echo -n $PRIVATE_KEY | xxd -r -p | openssl dgst -sha256 -binary | xxd -p -c 32)
    
    # –ü–æ–ª—É—á–∞–µ–º –≤–Ω–µ—à–Ω–∏–π IP
    EXTERNAL_IP=$(curl -s ifconfig.me || curl -s ipinfo.io/ip || echo "YOUR_SERVER_IP")
    
    cat > $CONFIG_DIR/server.conf << EOF
# QDYNN Server Configuration
SERVER_DOMAIN="tunnel.$(hostname -f 2>/dev/null || echo 'example.com')"
EXTERNAL_IP="$EXTERNAL_IP"
DNS_PORT="53"
HTTPS_PORT="443"
PRIVATE_KEY="$PRIVATE_KEY"
PUBLIC_KEY="$PUBLIC_KEY"
MAX_CLIENTS="100"
LOG_LEVEL="INFO"
ENABLE_SSL="true"
AUTO_UPDATE="true"
EOF
    
    chown qdynn:qdynn $CONFIG_DIR/server.conf
    chmod 640 $CONFIG_DIR/server.conf
    
    log_success "–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∞"
}

# –§–∏–Ω–∞–ª—å–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞
finalize_installation() {
    log_info "–ó–∞–≤–µ—Ä—à–∞–µ–º —É—Å—Ç–∞–Ω–æ–≤–∫—É..."
    
    # –°–æ–∑–¥–∞–µ–º —Å–∫—Ä–∏–ø—Ç—ã
    if [[ -x "$INSTALL_DIR/scripts/create-scripts.sh" ]]; then
        $INSTALL_DIR/scripts/create-scripts.sh
    else
        # –ü—ã—Ç–∞–µ–º—Å—è —Å–∫–∞—á–∞—Ç—å –µ—â—ë —Ä–∞–∑ –∏ –≤—ã–ø–æ–ª–Ω–∏—Ç—å
        fetch_scripts || true
        if [[ -x "$INSTALL_DIR/scripts/create-scripts.sh" ]]; then
            $INSTALL_DIR/scripts/create-scripts.sh
        else
            # –†–µ–∑–µ—Ä–≤–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è
            generate_runtime_scripts
        fi
    fi
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–∞–≤–∞
    chown -R qdynn:qdynn $INSTALL_DIR
    
    log_success "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!"
    
    echo -e "\n${GREEN}‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó${NC}"
    echo -e "${GREEN}‚ïë           –£–°–¢–ê–ù–û–í–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê!         ‚ïë${NC}"
    echo -e "${GREEN}‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù${NC}\n"
    
    echo -e "${CYAN}–°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:${NC}"
    echo -e "1. ${YELLOW}qdynn config domain your-domain.com${NC} - –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –¥–æ–º–µ–Ω"
    echo -e "2. ${YELLOW}qdynn start${NC} - –∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–µ—Ä–≤–µ—Ä"
    echo -e "3. ${YELLOW}qdynn status${NC} - –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è\n"
    
    echo -e "${BLUE}–î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è:${NC} https://github.com/Stepan163s/qdynn-server"
    echo -e "${BLUE}–ü–æ–¥–¥–µ—Ä–∂–∫–∞:${NC} https://t.me/qdynn_support\n"
}

# –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
main() {
    parse_args "$@"
    log_header
    check_root
    detect_os
    install_dependencies
    ensure_go
    setup_directories
    install_dnstt
    fetch_scripts
    create_cli
    create_service
    generate_config
    finalize_installation
}

# –ó–∞–ø—É—Å–∫ —É—Å—Ç–∞–Ω–æ–≤–∫–∏
main "$@"
